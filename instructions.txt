1) Use Python 3.12 modern features, for example batched from itertools, etc. - All the new features must be used.
2) Write code in the most modern way - use the last updates from language, libraries, frameworks, etc.
3) Use modern pyting approaches, so list instead of typing.List, str | int instead of typing.Union[str, int], bytes | None, instead of typing.Optional[bytes]. Not basic types like "Generator" can and must be used from typing.Generator - cause there is no alternatives
4) Add typings for ALL code, like function parameters and returns.
5) Use UV as package manager, pyproject.toml for all configurations(linter, tests) if possible. Add new packages only by UV (not pip)
6) Use ruff as linter
7) Use pytest as tests framework
8) Do not make obvious comments, code must be self-documenting, so make the function, variables, classes names understandable, do not put a lot of description comments. But for all tricky moments - left the comments
9) Use models (preferable Pydantic) everywhere where you need the data object, try to never use some abstract dict without schema definition. The TypedDict or dataclasses can be an option, but pydantic is more preferable.
10) Use pydantic-settings and .env file to handle project environment variables
11) Always set timeouts when run scripts, tests - cover yourself from infinity loops. Even if you sure - the command will run okay - run it with timeout
12) Use Dependency Injection when working on the OOP code - it's modern and awesome principle.
13) All the public methods must be on top of class, private on the bottom to face user class interfaces, no inner-methods.
14) Run linter when you think the job is done to ensure correct codestyle.
15) Run tests when you thins the job is done. Event if you sure it works - you must run the tests to prove it!
16) Add only the code related to the current task. So if your current task is: "Add test" - do nto add some pre-commit hooks, etc.
17) If we remove some library functional in the project - do not forget to remove this library dependency from project requirements
18) If we make some iterations working on the feature, do not use names like "Final", we never now where is the Final, so make some understandable and iterable naming.
19) When you creating the new code - be sure you do not break all existing code and logic

## Testing the extract_to_current_dir feature:

### Test 1: Normal behavior (extract_to_current_dir="Create New")
```bash
mkdir test_normal && cd test_normal
cookiecutter /path/to/BoilerplateBuilder --no-input extract_to_current_dir="Create New" project_name="TestProject"
# Should create TestProject/ directory with all files inside
ls -la TestProject/
```

### Test 2: Extract to current directory (extract_to_current_dir="Extract Here")
```bash
mkdir test_extract && cd test_extract
cookiecutter /path/to/BoilerplateBuilder --no-input extract_to_current_dir="Extract Here" project_name="TestProject"
# Should extract all files to current directory, no TestProject/ subdirectory
ls -la  # Files should be in current directory
```

### Test 3: Extract to existing repo with conflicts
```bash
mkdir test_conflict && cd test_conflict
echo "# Existing file" > README.md
cookiecutter /path/to/BoilerplateBuilder --no-input extract_to_current_dir="Extract Here" project_name="TestProject"
# Template README.md should overwrite existing one
cat README.md  # Should show template content
```
