"""Database configuration for {{ cookiecutter.project_name }}."""

import logging
from contextlib import contextmanager
from typing import AsyncGenerator, Generator

from sqlalchemy import create_engine
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine
from sqlalchemy.orm import Session, declarative_base, sessionmaker

from app.core.config import settings

logger = logging.getLogger(__name__)

# Create base class for models
Base = declarative_base()

# Create async engine
async_engine = create_async_engine(
    settings.async_database_url,
    echo=settings.log_level.upper() == "DEBUG",
    future=True,
)

# Create sync engine for migrations
sync_engine = create_engine(
    settings.sync_database_url,
    echo=settings.log_level.upper() == "DEBUG",
    future=True,
)

# Create session factories
AsyncSessionLocal = async_sessionmaker(
    async_engine,
    class_=AsyncSession,
    expire_on_commit=False,
)

SyncSessionLocal = sessionmaker(
    sync_engine,
    class_=Session,
    expire_on_commit=False,
)


async def init_db() -> None:
    """Initialize database."""
    logger.info("Initializing database...")
    # Import all models here to ensure they're registered
    # from app.models import *  # noqa
    logger.info("Database initialized")


async def close_db() -> None:
    """Close database connections."""
    logger.info("Closing database connections...")
    await async_engine.dispose()
    logger.info("Database connections closed")


async def get_async_db() -> AsyncGenerator[AsyncSession, None]:
    """Get async database session."""
    async with AsyncSessionLocal() as session:
        try:
            yield session
            await session.commit()
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()


@contextmanager
def get_sync_db() -> Generator[Session, None, None]:
    """Get sync database session."""
    session = SyncSessionLocal()
    try:
        yield session
        session.commit()
    except Exception:
        session.rollback()
        raise
    finally:
        session.close()