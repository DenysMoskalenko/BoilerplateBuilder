---
description: "Index and overview of all Python development rules and their organization"
globs:
alwaysApply: true
---
# Python Cursor Rules Index

These rules are automatically active in Cursor. All `.mdc` files in this directory are read and applied.

## Rule Organization

### 01-python-core.mdc
Core Python language requirements:
- Rule 1: Python 3.12+ features
- Rule 2: Modern code practices
- Rule 3: Modern typing syntax
- Rule 4: Type everything (pragmatically)
- Rule 5: Self-documenting code
- Rule 6: Class method order

### 02-python-tooling.mdc
Development tools and setup:
- Rule 7: UV package manager
- Rule 8: Ruff linting
- Rule 9: Pytest testing
- Rule 10: Run linter when done
- Rule 11: Run tests when done
- Rule 12: Remove unused dependencies
- Rule 13: Separate dev/prod dependencies

### 03-python-architecture.mdc
Architecture and data modeling:
- Rule 14: Pydantic models everywhere
- Rule 15: Pydantic settings for environment
- Rule 16: Dependency injection (FastAPI style)

### 04-python-workflow.mdc
Development workflow and practices:
- Rule 17: Add only task-related code
- Rule 18: Don't break existing code
- Workflow checklists
- Quick command reference
- Common anti-patterns

## All 18 Rules Summary
1. Python 3.12+ modern features
2. Write code in most modern way
3. Modern typing syntax
4. Type everything (pragmatically)
5. Self-documenting code
6. Class method order
7. UV package manager
8. Ruff as linter
9. Pytest for testing
10. Run linter when done
11. Run tests when done
12. Remove unused dependencies
13. Separate dev/prod dependencies
14. Pydantic models everywhere
15. Pydantic settings for environment
16. Dependency injection (FastAPI style)
17. Add only task-related code
18. Don't break existing code
