---
description: "Core Python 3.12+ language features, modern typing, and code organization"
globs: ["*.py"]
alwaysApply: false
---
# Python Core Language Rules

## 1. Python 3.12+ Modern Features
- **Always use Python 3.12+ features**
- Leverage new standard library functions when appropriate
- Stay current with latest Python enhancements
- Use new features that improve code clarity, not just for novelty

## 2. Write Code in Most Modern Way
- Use latest updates from language, libraries, frameworks
- Prioritize modern, idiomatic Python over legacy patterns
- Keep dependencies and implementations up-to-date

## 3. Modern Typing Syntax
- Use **built-in generics**: `list[str]` NOT `typing.List[str]`
- Use **union operator**: `str | int` NOT `typing.Union[str, int]`
- Use `bytes | None` NOT `typing.Optional[bytes]`
- Import from `typing` ONLY when no built-in exists (e.g., `Any`, `Annotated`, `Generator`)

## 4. Type Everything (Pragmatically)
- **ALL functions must have typed parameters and return types**
- **ALL class attributes must be typed**
- For collections:
  - `list[str]` is better than `list` - specify element types
  - `dict[str, User]` for typed mappings
  - Prefer Pydantic models over raw `dict` for data structures
- Type annotations should help, not clutter the code

## 5. Self-Documenting Code
- **No obvious comments**: `# increment i by 1` ❌
- **No redundant docstrings**: `"""Creates a user"""` for `create_user()` ❌
- Use descriptive names: `calculate_user_age()` not `calc()`
- Comment ONLY tricky logic, workarounds, business rules
- Docstrings for complex behavior, not obvious operations

## 6. Class Method Order
- Class attributes and constants first
- `__init__` and special methods
- **Public methods at top** (user-facing interface)
- **Private methods at bottom** (implementation details)
- No nested functions unless absolutely necessary



## Example: Modern Python 3.12 Code
```python
from typing import Annotated
from enum import StrEnum  # Python 3.11+ feature

from pydantic import BaseModel, Field

# Modern enum (Python 3.11+)
class Status(StrEnum):
    ACTIVE = "active"
    PENDING = "pending"
    ARCHIVED = "archived"

# Type annotations example (Rule 3 & 4)
class ProductFilter(BaseModel):
    name: str | None = None  # Union instead of Optional
    status: Status = Status.ACTIVE
    tags: list[str] = Field(default_factory=list)  # Specify element type
    metadata: dict = Field(default_factory=dict)  # Generic dict is fine
    price_range: tuple[float, float] | None = None

class ProductConfig(BaseModel):
    """Configuration schema instead of raw dict."""
    cache_ttl: int = 300
    max_results: int = 100
    enable_cache: bool = True

class ProductStats(BaseModel):
    """Statistics response schema."""
    total: int
    by_status: dict[Status, int]

class ProductService:
    """Example of proper method ordering (Rule 13)."""

    def __init__(self, config: ProductConfig) -> None:
        self._config = config
        self._cache: dict[int, Product] = {}  # Specific types when meaningful

    # Public methods first
    async def search_products(self, filters: ProductFilter) -> list[Product]:
        """Complex search with multiple filters."""
        query = self._build_query(filters)
        return await self._execute_search(query)

    async def get_product_stats(self) -> ProductStats:
        """Returns product statistics."""
        total = await self._count_total()
        by_status = await self._count_by_status()
        return ProductStats(total=total, by_status=by_status)

    # Private methods last
    def _build_query(self, filters: ProductFilter) -> Query:
        """Build database query from filters."""
        # Implementation
        pass
