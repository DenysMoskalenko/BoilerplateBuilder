name: Test All Project Templates

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-templates:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project_type: [fastapi_db, fastapi_slim, cli_db, cli_slim]
        python_version: ["3.11", "3.12"]

    steps:
    - name: Checkout cookiecutter template
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@v5
      with:
        python-version: ${{ matrix.python_version }}
        enable-cache: true

    - name: Install cookiecutter
      run: |
        uv tool install cookiecutter

    - name: Generate project from template
      run: |
        cookiecutter . --no-input \
          project_name="TestProject" \
          project_type="${{ matrix.project_type }}" \
          python_version="${{ matrix.python_version }}" \
          author_name="Test Author" \
          author_email="test@example.com" \
          use_pre_commit="yes" \
          use_github_actions="yes" \
          initialize_git="no"

    - name: Set up environment for generated project
      working-directory: ./TestProject
      run: |
        # Create lock file and install dependencies
        uv lock
        uv sync

        # Set up basic environment file
        echo "PROJECT_NAME=TestProject" > .env

    - name: Run linter
      working-directory: ./TestProject
      run: |
        uv run ruff check --fix .
        uv run ruff format --check .

    - name: Run tests
      working-directory: ./TestProject
      run: |
        uv run pytest -v

    - name: Test Docker build
      working-directory: ./TestProject
      run: |
        docker build -t test-project .

    - name: Test basic functionality
      working-directory: ./TestProject
      run: |
        # Test that the application can start without errors
        if [[ "${{ matrix.project_type }}" == "fastapi"* ]]; then
          # For FastAPI projects, test that the app can be imported
          uv run python -c "from app.main import app; print('FastAPI app imported successfully')"
        else
          # For CLI projects, test that main can run
          timeout 10s uv run python -m app.main || true
        fi

  test-template-generation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ["3.11", "3.12"]
    steps:
    - name: Checkout cookiecutter template
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@v5
      with:
        python-version: ${{ matrix.python_version }}
        enable-cache: true

    - name: Install cookiecutter
      run: |
        uv tool install cookiecutter

    - name: Test template generation with different options
      run: |
        # Test all combinations of key options
        for project_type in fastapi_db fastapi_slim cli_db cli_slim; do
          for pre_commit in yes no; do
            for github_actions in yes no; do
              echo "Testing: $project_type, pre_commit=$pre_commit, github_actions=$github_actions"

              project_name="TestProject"

              cookiecutter . --no-input \
                project_name="$project_name" \
                project_type="$project_type" \
                python_version="${{ matrix.python_version }}" \
                use_pre_commit="$pre_commit" \
                use_github_actions="$github_actions" \
                initialize_git="no"

              # Verify key files exist
              if [[ ! -f "$project_name/pyproject.toml" ]]; then
                echo "❌ pyproject.toml missing"
                exit 1
              fi

              if [[ ! -f "$project_name/Dockerfile" ]]; then
                echo "❌ Dockerfile missing"
                exit 1
              fi

              if [[ ! -f "$project_name/Makefile" ]]; then
                echo "❌ Makefile missing"
                exit 1
              fi

              # Verify conditional files
              if [[ "$project_type" == *"db"* ]]; then
                if [[ ! -f "$project_name/alembic.ini" ]]; then
                  echo "❌ alembic.ini missing for database project"
                  exit 1
                fi
                if [[ ! -f "$project_name/docker-compose.yaml" ]]; then
                  echo "❌ docker-compose.yaml missing for database project"
                  exit 1
                fi
              fi

              if [[ "$pre_commit" == "yes" ]]; then
                if [[ ! -f "$project_name/.pre-commit-config.yaml" ]]; then
                  echo "❌ .pre-commit-config.yaml missing"
                  exit 1
                fi
              fi

              if [[ "$github_actions" == "yes" ]]; then
                if [[ ! -f "$project_name/.github/workflows/pull_request.yml" ]]; then
                  echo "❌ .github/workflows/pull_request.yml missing"
                  exit 1
                fi
              fi

              echo "✓ $project_type generation successful"
              rm -rf "$project_name"
            done
          done
        done

        echo "All template combinations generated successfully!"
